#!/usr/bin/env python3
"""Unit tests."""

import unittest
from ubx import UBX
from ubx import parseUBXPayload, parseUBXMessage
import pprint
pp = pprint.PrettyPrinter(depth=4)

class TestStringMethods(unittest.TestCase):

    def testClassId1(self):
        getVer = UBX.MON.VER.Get()
        self.assertEqual(getVer._class, 0x0A)
        self.assertEqual(getVer._id, 0x04)

    def testClassId2(self):
        self.assertEqual(UBX.MON._class, 0x0A)
        self.assertEqual(UBX.MON.VER._class, 0x0A)
        self.assertEqual(UBX.MON.VER._id, 0x04)

    def testRXM(self):
        rxm = UBX.CFG.RXM(b'\x48\x00')
        self.assertEqual(rxm.reserved1, 0x48)
        self.assertEqual(rxm.lpMode, 0x00)
        rxm.lpMode = 1
        msg = rxm.serialize()
        rxm2 = parseUBXMessage(msg)
        self.assertEqual(rxm.reserved1, 0x48)
        self.assertEqual(rxm.lpMode, 0x01)

    def testMON_SPAN(self):
        # F9P data payload
        payload = b'\x00\x02\x00\x00\x39\x37\x37\x3A\x3A\x39\x39\x39\x39\x38\x38\x39\x39\x39\x3B\x3B\x3A\x3A\x39\x3B\x3F\x3C\x3D\x3E\x3C\x3D\x3F\x3F\x45\x3E\x40\x43\x66\x43\x55\x43\x47\x47\x44\x47\x49\x47\x4B\x48\x50\x47\x4C\x4E\x4F\x51\x56\x57\x5B\x5D\x60\x61\x66\x67\x69\x6C\x6E\x6F\x75\x73\x79\x79\x7A\x7D\x7E\x80\x83\x85\x86\x88\x87\x88\x8C\x8D\x8C\x8F\x92\x94\x95\x94\x93\x90\x8F\x8F\x8F\x8E\x8E\x90\x90\x8F\x8E\x8F\x91\x90\x92\x91\x93\x92\x91\x93\x94\x93\x94\x95\x99\x9E\xA3\xA6\xA5\xA0\x99\x96\x98\x98\x97\x97\x95\x97\x97\x97\x95\x94\x94\x99\x95\x94\x93\x92\x93\x9C\x93\x92\x92\x92\x94\x96\x97\x96\x95\x92\x90\x90\x8C\x8C\x8C\x8C\x8B\x8C\x8B\x8A\x8C\x8B\x8A\x8A\x8B\x8A\x8B\x8C\x8B\x8E\x8C\x8A\x89\x8B\x8B\x89\x89\x88\x87\x87\x85\x87\x86\x86\x84\x84\x84\x82\x82\x80\x80\x7E\x7D\x79\x79\x77\x75\x71\x71\x6E\x6D\x69\x65\x62\x5F\x5C\x57\x54\x52\x50\x4D\x4B\x4C\x4A\x4A\x49\x47\x47\x46\x45\x45\x42\x43\x42\x41\x41\x46\x40\x41\x3E\x42\x40\x40\x3D\x3D\x3D\x3D\x3C\x41\x3F\x3A\x3A\x39\x3A\x3A\x3A\x39\x39\x3A\x3A\x39\x38\x38\x3A\x39\x38\x38\x38\x39\x39\x38\x39\x00\x20\xA1\x07\x20\xA1\x07\x00\x82\xB3\x61\x5E\x33\x00\x00\x00\x34\x36\x33\x32\x36\x36\x36\x36\x36\x39\x38\x39\x39\x3A\x3B\x39\x3A\x42\x42\x41\x42\x40\x40\x41\x43\x49\x47\x46\x49\x47\x49\x4D\x4C\x51\x54\x51\x54\x57\x58\x5A\x5C\x5F\x5D\x60\x63\x64\x68\x68\x6B\x6C\x6E\x72\x73\x76\x78\x79\x7D\x7E\x81\x87\x84\x87\x88\x8A\x8B\x8C\x8E\x8E\x90\x91\x91\x94\x94\x95\x94\x96\x96\x97\x96\x96\x97\x97\x96\x99\x98\x99\x9A\x99\x99\x98\x99\x99\x9B\x9B\x9B\x99\x98\x97\x97\x96\x96\x96\x97\x94\x94\x94\x94\x94\x95\x94\x95\x94\x93\x96\x94\x94\x95\x95\x95\x96\x95\x95\x95\x95\x95\x94\x94\x91\x93\x94\x94\x93\x92\x97\x9C\x9A\x93\x92\x91\x91\x92\x91\x90\x91\x90\x8F\x8F\x90\x8F\x8F\x8E\x8E\x8C\x8E\x8F\x8D\x8E\x8D\x94\x8B\x8C\x8C\x8B\x8E\x8A\x89\x8B\x8B\x8B\x8C\x8D\x8B\x8B\x8A\x8B\x8A\x8B\x8A\x8B\x89\x8A\x89\x89\x88\x85\x86\x85\x84\x82\x81\x81\x7D\x7C\x7C\x79\x77\x74\x74\x71\x6E\x6C\x6A\x67\x66\x64\x61\x5F\x5E\x5B\x59\x57\x56\x56\x51\x50\x4E\x4D\x4B\x49\x49\x47\x44\x44\x43\x41\x3F\x3E\x3C\x3C\x3A\x3B\x3A\x38\x39\x37\x37\x38\x38\x37\x4A\x36\x35\x35\x34\x34\x34\x34\x33\x33\x32\x34\x33\x34\x33\x33\x32\x00\x20\xA1\x07\x20\xA1\x07\x00\x6A\xDA\xF4\x48\x2D\x00\x00\x00'
        span=parseUBXPayload(UBX.MON._class,  UBX.MON.SPAN._id, payload)
        self.assertEqual(span.numRfBlocks, 2)
        self.assertEqual(span.center_2, 1224006250)
        self.assertEqual(span.spectra[1]['spectrumBinCenterFreqs'][0], 1160006250.0)

    def testMON_VER(self):
        payload = b'\x52\x4f\x4d\x20\x43\x4f\x52\x45\x20\x33\x2e\x30\x31\x20\x28\x31\x30\x37\x38\x38\x38\x29\x00\x00\x00\x00\x00\x00\x00\x00\x30\x30\x30\x38\x30\x30\x30\x30\x00\x00\x46\x57\x56\x45\x52\x3d\x53\x50\x47\x20\x33\x2e\x30\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x52\x4f\x54\x56\x45\x52\x3d\x31\x38\x2e\x30\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x47\x50\x53\x3b\x47\x4c\x4f\x3b\x47\x41\x4c\x3b\x42\x44\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x53\x42\x41\x53\x3b\x49\x4d\x45\x53\x3b\x51\x5a\x53\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        ver = parseUBXPayload(UBX.MON._class, UBX.MON.VER._id, payload)
        self.assertEqual(ver.swVersion, "ROM CORE 3.01 (107888)")
        self.assertEqual(ver.hwVersion, "00080000")
        self.assertEqual(ver.extension_1, "FWVER=SPG 3.01")
        self.assertEqual(ver.extension_2, "PROTVER=18.00")
        self.assertEqual(ver.extension_3, "GPS;GLO;GAL;BDS")
        self.assertEqual(ver.extension_4, "SBAS;IMES;QZSS")

    def testRXM_SFRBX(self):
         payload = b'\x05\x02\x00\x00\x0a\x25\x02\x00\x81\xaa\xc0\x22\xcf\x05\x37\x94\x56\x3d\x43\x3f\x7e\x10\xc0\xbf\x21\x20\x03\xb6\x29\x00\x00\x80\x29\x00\x00\x80\xfb\x13\x9b\x80\xcf\x41\xa2\x04\xa3\x00\x80\x04'
         sfrbx = parseUBXPayload(UBX.RXM._class,  UBX.RXM.SFRBX._id, payload)
         self.assertEqual(sfrbx.words[0], 0x22c0aa81)
         self.assertEqual(sfrbx.words[9], 0x048000a3)

    def testRXM_RAWX(self):
        payload = b'\xfe\xd4\x78\xe9\x87\x52\x0e\x41\x4f\x08\x12\x37\x01\x01\xce\x3c\xc6\x74\x5f\xdd\x21\x67\x70\x41\x94\x83\x52\xac\xa5\x8c\x95\x41\xbf\xa3\x2b\xc2\x00\x09\x00\x00\xf4\xfb\x2b\x03\x01\x06\x07\x00\x46\x39\x34\x35\x1a\x9b\x70\x41\x13\xdd\xf5\x68\xec\xd0\x95\x41\x28\xac\x14\x44\x00\x07\x00\x00\xf4\xfb\x2a\x04\x02\x07\x07\x00\xb9\xd9\x77\xe4\xae\x85\x73\x41\x27\xc8\xae\x27\xc0\xa5\x99\x41\xd0\xee\x65\x44\x02\x1b\x00\x00\xf4\xfb\x2b\x04\x01\x06\x07\x00\x55\x25\xcc\xe1\xf2\xe8\x73\x41\x0e\xbc\xbe\x91\x29\x28\x9a\x41\xcf\xbe\x6a\x44\x00\x1b\x00\x00\x0c\x1c\x21\x06\x05\x08\x07\x00\xd4\x3b\xdc\xbf\x08\xdb\x74\x41\x99\xd0\xf4\x21\x34\x66\x9b\x41\x34\xfe\x38\xc5\x02\x08\x00\x00\xa4\xc4\x21\x06\x04\x08\x07\x00\xb0\xdc\x4e\xe9\x46\x7a\x72\x41\xd0\x4f\xf8\x82\x71\x46\x98\x41\x00\x5c\xed\x44\x00\x1e\x00\x00\xf4\xfb\x27\x04\x02\x07\x07\x00\x29\x72\x8c\x21\x7b\xf4\x7f\x41\x18\xac\xe4\x24\xbd\xcc\xa4\x41\xc1\x90\x54\x42\x03\x10\x00\x00\xc0\x12\x24\x05\x03\x08\x03\x00\x62\x59\xb6\x81\xb7\x42\x7f\x41\x64\x8e\xd9\xe2\x07\x59\xa4\x41\x41\x45\xab\xc2\x03\x06\x00\x00\x44\x02\x22\x07\x06\x0a\x03\x00\x2c\x1b\xc7\xf1\x99\xb8\x72\x41\xf1\x82\xc0\xa4\x15\x5f\x98\x41\x83\x61\x0a\xc5\x03\x17\x00\x00\x34\x1c\x1c\x07\x06\x08\x07\x00\x5a\x5e\x7e\xcb\x7e\xcd\x72\x41\xfc\x25\x2e\x78\x48\x7a\x98\x41\xa8\xf5\x84\x44\x03\x14\x00\x00\xf4\xfb\x27\x04\x02\x07\x07\x00\x14\x48\xb4\x03\xaa\x1e\x73\x41\xb2\xf8\x09\x59\xad\x98\x99\x41\xe7\x85\x68\x45\x06\x08\x00\x0d\xf4\x1a\x1d\x08\x07\x08\x0f\x00\x82\xa2\xf8\x98\x34\xc0\x6e\x41\xf3\x43\x49\x66\xa4\x86\x94\x41\x40\xe6\xca\xc2\x06\x09\x00\x05\xf4\xfb\x2a\x07\x02\x07\x0f\x00\x3c\x09\x78\xce\xfc\xc1\x70\x41\x76\x17\x1c\xf7\x15\x61\x96\x41\x8a\x7c\x4c\xc5\x06\x10\x00\x06\x84\x03\x23\x07\x04\x08\x03\x00\xa1\x73\xe2\x58\x82\x1a\x72\x41\x3a\xd3\x6f\xa9\x22\x20\x98\x41\xf9\x9c\x2a\x45\x06\x0a\x00\x00\x84\x03\x23\x07\x05\x08\x03\x00\xba\x31\x67\x8f\xf1\xdd\x73\x41\x67\xf3\x5a\x0d\xb4\x19\x9a\x41\x9a\xec\x08\x45\x00\x08\x00\x00\x64\x32\x22\x05\x03\x07\x0f\x00\x43\x3e\xc3\xab\xdc\x67\x74\x41\xd6\x22\xbd\x2e\xe5\xce\x9a\x41\xb3\x2c\x83\xc5\x00\x03\x00\x00\x5c\x1c\x21\x06\x04\x08\x07\x00\xf2\x4a\xf5\xe7\x3a\xf3\x72\x41\x7b\x62\x7c\x9d\x58\xe5\x98\x41\x0b\x3a\xec\xc4\x02\x1e\x00\x00\xf4\xfb\x27\x05\x02\x07\x07\x00\xb2\x43\x6d\xb9\xc7\x48\x80\x41\x45\x05\x26\xaa\xfb\x32\xa5\x41\xe1\x42\x2a\x43\x03\x09\x00\x00\xc0\x12\x1f\x06\x06\x09\x03\x00\x7d\x10\x00\x1f\x45\x8f\x76\x41\xa1\xaf\x0c\x28\x56\x5e\x9d\x41\x54\x37\x4a\xc5\x03\x19\x00\x00\x08\x07\x1e\x07\x07\x09\x03\x00\x37\xc9\xb9\xb7\x03\x5d\x6f\x41\x74\x01\x55\x2c\x7e\xfc\x94\x41\x0a\xa4\xaf\x44\x06\x07\x00\x0c\xf4\xfb\x2a\x07\x02\x06\x0f\x00\xb7\x4e\x5f\x50\x00\x1f\x7f\x41\x35\x92\x70\x01\x5c\x71\xa4\x41\xbf\x67\xbe\x44\x05\x02\x00\x00\xf4\xfb\x29\x03\x01\x06\x0f\x00\x08\x00\xe8\x5b\x1b\x5a\x77\x41\xd6\xc4\xd8\x5d\xca\xad\x9e\x41\x8b\x33\x19\x45\x02\x15\x00\x00\x98\x1c\x20\x07\x05\x08\x07\x00\x98\xd5\xc4\xc1\xff\xe5\x72\x41\xb6\xc1\x48\xd8\xf6\xd3\x98\x41\xda\xf9\x32\xc5\x00\x10\x00\x00\xf4\xfb\x28\x03\x01\x06\x07\x00\xe4\xd6\x5c\x4f\x10\x83\x69\x41\x07\xe4\x41\x03\x1f\xc2\x90\x41\x5e\xc1\xa0\x44\x02\x14\x00\x00\x00\x1e\x26\x06\x03\x07\x07\x00\x2e\xdf\xb9\xb6\x1e\xee\x7e\x41\xbf\x46\x27\xff\x3f\x51\xa4\x41\xc9\x6e\x15\xc5\x05\x01\x00\x00\xf4\xfb\x28\x04\x02\x07\x0f\x00\x8e\x71\xa2\x99\x83\x6a\x80\x41\x45\x3d\xa7\x07\x17\x91\xa5\x41\x88\x63\xc8\xc3\x05\x07\x00\x00\x48\x1c\x21\x06\x04\x08\x0f\x00\x07\xa8\xfd\x86\xb6\x01\x73\x41\x45\x50\x9d\x84\x5f\xf8\x98\x41\xac\xa2\x23\x44\x02\x0e\x00\x00\x94\x1b\x20\x07\x06\x08\x07\x00\x4b\x17\xc3\x4f\xd3\x79\x73\x41\x62\x77\xa1\x13\x2c\x96\x99\x41\x0c\xdf\x99\xc4\x02\x07\x00\x00\xf4\xfb\x2b\x05\x01\x06\x07\x00\x70\xfd\x60\xc1\x6b\xca\x77\x41\x46\xf8\x73\x22\x58\x41\x9f\x41\x21\x31\x4a\xc5\x02\x02\x00\x00\xdc\x28\x22\x05\x04\x08\x07\x00\xff\x41\x29\xf3\x89\x68\x71\x41\x27\xdc\x0b\x41\xd1\xde\x96\x41\xfa\xb4\x0c\xc5\x00\x04\x00\x00\xf4\xfb\x29\x03\x01\x06\x07\x00\x68\x03\x77\x15\x3b\xf3\x72\x41\x5f\x97\xc5\x57\x79\x13\x93\x41\x2a\x00\xb5\xc4\x02\x1e\x06\x00\xf4\xfb\x2c\x03\x02\x07\x07\x00\xc8\x88\x8b\xda\x6b\xca\x77\x41\x39\xb9\x64\x8e\xe6\xf2\x97\x41\xbf\xea\x1a\xc5\x02\x02\x06\x00\x40\x1f\x28\x04\x02\x07\x07\x00\xe8\x80\x9a\x8f\xd3\x79\x73\x41\x19\x51\x31\xcd\xf6\x9a\x93\x41\x4b\xb2\x6b\xc4\x02\x07\x06\x00\xc8\x05\x28\x05\x04\x08\x07\x00\x37\x21\x8f\xf9\xae\x85\x73\x41\x44\xe0\xa8\x73\xe6\xa6\x93\x41\x34\x2f\x30\x44\x02\x1b\x06\x00\x50\xc3\x29\x03\x02\x07\x07\x00\x4b\x25\xed\x76\x1b\x5a\x77\x41\xef\xc5\x81\x1a\xd7\x81\x97\x41\x98\xc3\xea\x44\x02\x15\x06\x00\x58\x0c\x26\x05\x05\x08\x07\x00\xc1\xce\xfc\xe9\x08\xdb\x74\x41\x98\x32\x25\x2b\x85\xfe\x94\x41\x84\xab\x0d\xc5\x02\x08\x06\x00\x6c\x02\x22\x06\x07\x08\x07\x00\x7d\xa1\x7e\x09\x7b\xf4\x7f\x41\x24\xcb\x5f\xfd\x6c\x15\xa0\x41\x00\x33\x24\x42\x03\x10\x02\x00\xf4\xfb\x2d\x03\x02\x06\x07\x00\x89\x67\x8d\x21\xb7\x42\x7f\x41\x15\x1f\x83\x83\xe7\x77\x9f\x41\x20\x66\x83\xc2\x03\x06\x02\x00\xf4\xfb\x2c\x04\x03\x07\x07\x00\x44\xa9\x6b\xd9\xb6\x01\x73\x41\x38\xce\xe6\xbc\x0d\x22\x93\x41\xd7\x4c\xfa\x43\x02\x0e\x06\x00\xd0\x1b\x25\x05\x05\x08\x07\x00\x8c\xc7\x55\x28\xd5\xfe\x80\x41\x96\x38\x02\x01\xc0\x1b\xa1\x41\x50\x55\x52\x44\x03\x07\x02\x00\x98\x03\x1f\x07\x07\x09\x03\x00\x4a\x05\xdc\xf4\xb2\xda\x81\x41\x41\x61\x40\xe8\x13\xf9\xa1\x41\x36\x06\xf6\xc4\x03\x0d\x02\x00\x80\x02\x23\x07\x06\x09\x03\x00\x3a\x8c\xa9\x93\xc7\x48\x80\x41\xf7\x3d\x79\xa6\x7c\x64\xa0\x41\x60\x60\x03\x43\x03\x09\x02\x00\xf4\xfb\x29\x04\x03\x07\x07\x00\x30\x96\x73\xc4\x89\x68\x71\x41\x95\x73\x14\xd4\x31\xd2\x91\x41\xb2\xb3\xda\xc4\x00\x04\x03\x00\x00\x00\x1e\x09\x0f\x09\x01\x00\xcf\xa9\x85\xcf\x21\x67\x70\x41\x9b\x0c\xed\xaa\xaf\xca\x90\x41\xc0\x99\x05\xc2\x00\x09\x03\x00\xf4\xfb\x29\x05\x02\x07\x07\x00\xe9\x2b\x7a\xfe\xdc\x67\x74\x41\x28\x1b\x64\x36\xb6\xe3\x94\x41\x56\x6b\x4c\xc5\x00\x03\x03\x00\x14\x19\x20\x07\x06\x08\x07\x00\x98\x85\xd5\xc8\x34\xc0\x6e\x41\xa2\x00\xe5\x77\xe3\xed\x8f\x41\x9f\xe3\x9d\xc2\x06\x09\x02\x05\x24\x13\x28\x07\x03\x07\x07\x00\x2a\x2c\x21\xb2\x03\x5d\x6f\x41\xdc\xc7\xed\x04\x9b\x52\x90\x41\x5b\x9f\x88\x44\x06\x07\x02\x0c\x84\x03\x27\x07\x04\x09\x03\x00\xc9\xb3\x64\xf0\xa9\x1e\x73\x41\x27\x72\x4a\x85\x86\xe8\x93\x41\x9a\xe0\x34\x45\x06\x08\x02\x0d\x84\x03\x25\x08\x03\x08\x03\x00\xc8\x6e\x1c\xe0\x46\x7a\x72\x41\x72\xbf\x43\x59\x6c\xea\x92\x41\xc0\xee\xb8\x44\x00\x1e\x03\x00\xe8\x03\x26\x05\x04\x08\x07\x00\x64\xc4\xdd\xbc\x1e\xee\x7e\x41\x69\x80\x9d\x2f\xd8\xa9\x9f\x41\x2c\xea\xe8\xc4\x05\x01\x05\x00\x5c\x03\x20\x07\x06\x0a\x07\x00\xee\xb2\xdb\x0a\xf3\xe8\x73\x41\x6d\xa1\xc1\xee\xc9\x61\x94\x41\x9c\xea\x36\x44\x00\x1b\x03\x00\x14\xc3\x25\x06\x04\x08\x07\x00\x01\x54\x2c\x9d\x83\x6a\x80\x41\x94\x28\x19\xf5\x25\xce\xa0\x41\xb8\x0a\x9c\xc3\x05\x07\x05\x00\xa4\xc4\x26\x05\x03\x08\x07\x00\x4e\xba\xa3\x8a\xfd\xc1\x70\x41\x44\x9e\xe1\x67\xf5\x67\x91\x41\xa8\x05\x1f\xc5\x06\x10\x02\x06\x84\x03\x1b\x08\x09\x09\x03\x00\x63\xb1\x9f\x1a\x1a\x9b\x70\x41\x6e\x00\xb0\x50\xe3\xff\x90\x41\xb0\x76\xe7\x43\x00\x07\x03\x00\xe8\x03\x25\x05\x03\x07\x07\x00\x81\x37\x4f\x5d\x00\x1f\x7f\x41\x4d\x12\x3c\x8b\xe2\xdb\x9f\x41\x9b\x67\x94\x44\x05\x02\x05\x00\xf4\xfb\x25\x05\x03\x07\x07\x00'
        rawx = parseUBXPayload(UBX.RXM._class,  UBX.RXM.RAWX._id, payload)
        self.assertEqual(rawx.frame['measurements'][1]['cpMes'],91503386.24010114)


    def testCFG_GNSS(self):
        payload = b'\x00\x20\x20\x07\x00\x08\x10\x00\x01\x00\x01\x01\x01\x01\x03\x00\x01\x00\x01\x01\x02\x04\x08\x00\x00\x00\x01\x01\x03\x08\x10\x00\x00\x00\x01\x01\x04\x00\x08\x00\x00\x00\x01\x03\x05\x00\x03\x00\x01\x00\x01\x05\x06\x08\x0e\x00\x01\x00\x01\x01'
        gnss = parseUBXPayload(UBX.CFG._class, UBX.CFG.GNSS._id, payload)
        self.assertEqual(gnss.msgVer, 0x00)
        self.assertEqual(gnss.numConfigBlocks, 0x07)
        self.assertEqual(gnss.maxTrkCh_1, 0x10)
        self.assertEqual(gnss.flags_4, 0x01010000)
        self.assertEqual(gnss.maxTrkCh_7, 0x0E)


if __name__ == '__main__':
    unittest.main()
